<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<mvc:annotation-driven />

	<!-- 首页跳转 -->
	<!-- <mvc:view-controller path="/" view-name="forward:/login" /> -->

	<!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
	<mvc:default-servlet-handler />

	<!-- 静态资源映射 -->
	<mvc:resources mapping="/res/**" location="/WEB-INF/res/" />

	<!-- 扫描并自动装配Control -->
	<context:component-scan base-package="com.r.boda" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 添加mvc拦截器 -->
<!-- 	<mvc:interceptors> -->
<!-- 		<bean id="checkAuthInterceptor" class="com.r.boda.uploadservice.support.listener.TestHandlerInterceptorAdapter"></bean> -->
<!-- 	</mvc:interceptors> -->

	<!-- 使用短URL映射 -->
	<!-- ContentNegotiatingViewResolver是根据客户提交的MimeType(如 text/html,application/xml)来跟服务端的一组viewResover的MimeType相比较,如果符合,即返回viewResover的数据.而 /user/123.xml, ContentNegotiatingViewResolver会首先将 .xml 根据mediaTypes属性将其转换成 application/xml,然后完成前面所说的比较. -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager">
			<bean class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
				<property name="favorPathExtension" value="true" />	<!-- 这里是是否启用扩展名支持，默认true			例如  /user/{userid}.json  -->
				<property name="favorParameter" value="false" />	<!-- 这里是是否启用参数支持，默认false				例如  /user/{userid}?format=json    format是默认的参数名-->
				<property name="ignoreAcceptHeader" value="false" />	<!-- 这里是否忽略掉accept header，默认false		例如  GET /user HTTP/1.1   Accept:application/json  -->
				<property name="defaultContentType" value="text/html" />	<!-- 如果所有的mediaType都没匹配上，就会使用defaultContentType -->
				<property name="mediaTypes">
				<!-- 如果上面有启用扩展名支持    例如 /user/{userid}.json  中的   .json  就会映射到   application/json  -->
					<map>
		                <entry key="atom" value="application/atom+xml" />
		                <entry key="htm" value="text/html" /><!-- 真正静态页面，使用html后缀(文件格式) -->
		                <entry key="json" value="application/json" />
		                <entry key="xml" value="application/xml" />
					</map>
				</property>
			</bean>
		</property>

		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/WEB-INF/views/" />
					<property name="suffix" value=".jsp" />
					<property name="contentType" value="text/html;charset=UTF-8" /> <!-- 解析页面时,采用utf-8 -->
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
			</list>
		</property>
	</bean>
	
	<!-- 上传 -->
	<bean id="multipartResolver" class="com.r.boda.uploadservice.support.listener.UploadCommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize" value="999999999999999" />
	</bean>

</beans>
